{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPSlHKPxJ5Euo4is2zW9gie"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Proyecto: Desarrollo de recomendador personalizado de lectura\n","\n","✨ **Autores:   Maria Estrada,\n","              Luis Ramírez**\n","\n","Objetivos específicos:\n","\n","* Identificar los gustos de lectura del usuario\n","* Recomendar textos según las características del lector\n","* Incrementar el nivel de lectura de la persona"],"metadata":{"id":"8oFFpQNYVrH9"}},{"cell_type":"markdown","source":["# Ingreso de datos"],"metadata":{"id":"d5WxBtpa06dx"}},{"cell_type":"code","source":["# Solicitar datos del usuario\n","name = input(\"Nombre completo: \")\n","nationality = input(\"Nacionalidad: \")\n","age = int(input(\"Edad: \"))\n","sex = input(\"Sexo: \")\n","genre = input(\"Género favorito: \")\n","theme = input(\"Tema favorito: \")\n","mood = input(\"Estado de ánimo actual: \")\n","\n","# Mostrar los datos ingresados\n","print(\"\\nDatos ingresados:\")\n","print(f\"Nombre: {name}\")\n","print(f\"Nacionalidad: {nationality}\")\n","print(f\"Edad: {age}\")\n","print(f\"Sexo: {sex}\")\n","print(f\"Género favorito: {genre}\")\n","print(f\"Tema favorito: {theme}\")\n","print(f\"Estado de ánimo: {mood}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7U7s927YjPJo","executionInfo":{"status":"ok","timestamp":1742140959592,"user_tz":300,"elapsed":117536,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"a3ca53ed-7233-4bba-8a50-1cc802bfb4b7"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Nombre completo: María\n","Nacionalidad: Colombiana\n","Edad: 24\n","Sexo: Femenino\n","Género favorito: Acción\n","Tema favorito: Fantasía\n","Estado de ánimo actual: Feliz\n","\n","Datos ingresados:\n","Nombre: María\n","Nacionalidad: Colombiana\n","Edad: 24\n","Sexo: Femenino\n","Género favorito: Acción\n","Tema favorito: Fantasía\n","Estado de ánimo: Feliz\n"]}]},{"cell_type":"markdown","source":["# Matriz de libros y recomendación por género favorito"],"metadata":{"id":"FZic0dG-1DAn"}},{"cell_type":"code","source":["# Datos del usuario\n","user_preferences = {\n","    'genre': ['Terror'], # Género de libros favorito\n","    'theme': ['Desarrollo Personal'], # Tema de libros favorito\n","    'mood': 'feliz',  # Estado de ánimo del usuario\n","    'age': 15,  # Edad del usuario\n","    'sex': 'femenino',  # Sexo del usuario\n","    'nationality': 'Colombiano'  # Nacionalidad del usuario\n","\n","    }\n"],"metadata":{"id":"SKp_Cb8XXGaZ","executionInfo":{"status":"ok","timestamp":1742143909810,"user_tz":300,"elapsed":11,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}}},"execution_count":96,"outputs":[]},{"cell_type":"code","execution_count":129,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P7gjPeWeVqiX","executionInfo":{"status":"ok","timestamp":1742145402293,"user_tz":300,"elapsed":19,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"a8234342-4149-4c34-fd34-4580c29cda3f"},"outputs":[{"output_type":"stream","name":"stdout","text":["   book_id                    title                  author            genre  \\\n","0        0  El señor de los anillos          J.R.R. Tolkien         Fantasía   \n","1        1                     1984           George Orwell  Ciencia ficción   \n","2        2     Cien años de soledad  Gabriel García Márquez  Realismo mágico   \n","3        3                Fundación            Isaac Asimov  Ciencia ficción   \n","4        4             Harry Potter            J.K. Rowling         Fantasía   \n","\n","             theme  rating  \n","0         Aventura       5  \n","1         Distopía       4  \n","2  Realismo mágico       5  \n","3        Futurismo       4  \n","4            Magia       5  \n","Libros recomendados: ['El señor de los anillos', 'Harry Potter']\n"]}],"source":["import pandas as pd\n","\n","# Crear un dataframe de libros con ejemplo de columnas\n","books = pd.DataFrame({\n","    'book_id': [0, 1, 2, 3, 4],\n","    'title': ['El señor de los anillos', '1984', 'Cien años de soledad', 'Fundación', 'Harry Potter'],\n","    'author': ['J.R.R. Tolkien', 'George Orwell', 'Gabriel García Márquez', 'Isaac Asimov', 'J.K. Rowling'],\n","    'genre': ['Fantasía', 'Ciencia ficción', 'Realismo mágico', 'Ciencia ficción', 'Fantasía'],\n","    'theme': ['Aventura', 'Distopía', 'Realismo mágico', 'Futurismo', 'Magia'],\n","    'rating': [5, 4, 5, 4, 5]  # Valoraciones previas (si existen)\n","})\n","\n","print(books)\n","def recomendar_libros(user_preferences, books):\n","    recomendaciones = []\n","\n","    # Filtrar libros que coincidan con el género o tema preferido del usuario\n","    for _, book in books.iterrows():\n","        if book['genre'] in user_preferences['genre'] or book['theme'] in user_preferences['theme']:\n","            recomendaciones.append(book['title'])\n","\n","    return recomendaciones\n","\n","# Supongamos que el usuario prefiere libros de 'Fantasía' y 'Aventura'\n","user_preferences = {'genre': ['Fantasía'], 'theme': ['Aventura']}\n","\n","recommendation = recomendar_libros(user_preferences, books)\n","print(f\"Libros recomendados: {recommendation}\")\n"]},{"cell_type":"markdown","source":["# Matriz de valoración de libros y recomendación por estado de ánimo"],"metadata":{"id":"D1RuOlbc1T0X"}},{"cell_type":"code","source":["from sklearn.metrics.pairwise import cosine_similarity\n","import numpy as np\n","\n","# Crear una matriz de usuarios y valoraciones (para simplicidad, usamos un ejemplo pequeño)\n","user_ratings = pd.DataFrame({\n","    'user1': [5, 0, 0, 4, 0],\n","    'user2': [0, 4, 0, 0, 5],\n","    'user3': [0, 0, 5, 0, 4],\n","    'user4': [0, 4, 0, 0, 5],\n","    'user5': [0, 0, 5, 0, 4]\n","}, index=['El señor de los anillos', '1984', 'Cien años de soledad', 'Fundación', 'Harry Potter'])\n","\n","# Usamos Cosine Similarity para encontrar similitudes entre los usuarios\n","cosine_sim = cosine_similarity(user_ratings.fillna(0))\n","\n","# Convertimos la matriz de similitudes en un dataframe\n","cosine_sim_df = pd.DataFrame(cosine_sim, index=user_ratings.columns, columns=user_ratings.columns)\n","\n","print(cosine_sim_df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-KS5yLaRW4d7","executionInfo":{"status":"ok","timestamp":1742142973137,"user_tz":300,"elapsed":62,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"a8609131-9c3e-4e9d-a140-67ab4a9a0359"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["       user1     user2     user3  user4     user5\n","user1    1.0  0.000000  0.000000    1.0  0.000000\n","user2    0.0  1.000000  0.000000    0.0  0.780869\n","user3    0.0  0.000000  1.000000    0.0  0.624695\n","user4    1.0  0.000000  0.000000    1.0  0.000000\n","user5    0.0  0.780869  0.624695    0.0  1.000000\n"]}]},{"cell_type":"code","source":["mood = 'feliz'\n","\n","def correlacionar_animo_con_libros(mood, books):\n","    animo_books = []\n","\n","    # Relacionar estado de ánimo con temática de los libros\n","    if mood == 'feliz':\n","        animo_books = books[books['theme'].isin(['Aventura', 'Comedia', 'Fantástica'])]\n","    elif mood == 'triste':\n","        animo_books = books[books['theme'].isin(['Drama', 'Emoción', 'Superación'])]\n","    elif mood == 'estresado':\n","        animo_books = books[books['theme'].isin(['Autoayuda', 'Relajación', 'Calma'])]\n","\n","    return animo_books\n","\n","# Filtrar libros según el estado de ánimo\n","animo_books = correlacionar_animo_con_libros(mood, books)\n","\n","print(animo_books)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mxNehUMsXOWZ","executionInfo":{"status":"ok","timestamp":1742143827558,"user_tz":300,"elapsed":21,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"ee0132c7-8e2e-4505-c6eb-7379d3712a5d"},"execution_count":93,"outputs":[{"output_type":"stream","name":"stdout","text":["   book_id                    title          author     genre     theme  \\\n","0        0  El señor de los anillos  J.R.R. Tolkien  Fantasía  Aventura   \n","\n","   rating  \n","0       5  \n"]}]},{"cell_type":"markdown","source":["# Recomendación de libros con respecto a la edad"],"metadata":{"id":"bZrmI4dU3dpm"}},{"cell_type":"code","source":["age = 18\n","\n","def correlacionar_edad_con_libros(age, books):\n","    age_books = []\n","\n","    # Relacionar edad con tipo de libro\n","    if age < 18:\n","        age_books = books[books['genre'].isin(['Fantasía', 'Aventura', 'Juvenil'])]\n","    elif 18 <= age <= 35:\n","        age_books = books[books['genre'].isin(['Ficción contemporánea', 'Desarrollo personal', 'Ciencia ficción'])]\n","    else:\n","        age_books = books[books['genre'].isin(['Historia', 'Filosofía', 'Clásicos', 'Política'])]\n","\n","    return age_books\n","\n","# Filtrar libros según la edad\n","age_books = correlacionar_edad_con_libros(age, books)\n","print(age_books)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4t-puyk2XTft","executionInfo":{"status":"ok","timestamp":1742143993662,"user_tz":300,"elapsed":9,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"d464c152-2e82-4b86-a158-c946bde09539"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stdout","text":["   book_id      title         author            genre      theme  rating\n","1        1       1984  George Orwell  Ciencia ficción   Distopía       4\n","3        3  Fundación   Isaac Asimov  Ciencia ficción  Futurismo       4\n"]}]},{"cell_type":"markdown","source":["# Correlación de parámetros de recomendación"],"metadata":{"id":"ToLCLYfK4HIn"}},{"cell_type":"code","source":["def recomendar_libros_personalizados(user_preferences, books):\n","    # Filtrar libros según estado de ánimo\n","    mood_books = correlacionar_mood_con_libros(user_preferences['mood'], books)\n","\n","    # Filtrar libros según edad\n","    age_books = correlacionar_edad_con_libros(user_preferences['age'], books)\n","\n","    # Hacer una intersección entre ambos filtros (solo libros que cumplen ambas condiciones)\n","    recomendaciones = pd.merge(mood_books, age_books, how='inner', on=['book_id'])\n","\n","    return recomendaciones\n","\n","# Obtener recomendaciones\n","recomendaciones = recomendar_libros_personalizados(user_preferences, books)\n","print(recomendaciones)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RWJKv7gyXZMi","executionInfo":{"status":"ok","timestamp":1742144002281,"user_tz":300,"elapsed":19,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"e3e7bd14-01e1-4928-ce9d-6a53144853d8"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["   book_id                  title_x        author_x   genre_x   theme_x  \\\n","0        0  El señor de los anillos  J.R.R. Tolkien  Fantasía  Aventura   \n","\n","   rating_x                  title_y        author_y   genre_y   theme_y  \\\n","0         5  El señor de los anillos  J.R.R. Tolkien  Fantasía  Aventura   \n","\n","   rating_y  \n","0         5  \n"]}]},{"cell_type":"markdown","source":["# Dataframe con URL de libros"],"metadata":{"id":"QeowexlJ4N1W"}},{"cell_type":"code","source":["# Crear un dataframe de libros con ejemplo de columnas, incluyendo la URL\n","books = pd.DataFrame({\n","    'book_id': [1, 2, 3, 4, 5],\n","    'title': ['El señor de los anillos', '1984', 'Cien años de soledad', 'Fundación', 'Harry Potter'],\n","    'author': ['J.R.R. Tolkien', 'George Orwell', 'Gabriel García Márquez', 'Isaac Asimov', 'J.K. Rowling'],\n","    'genre': ['Fantasía', 'Ciencia ficción', 'Realismo mágico', 'Ciencia ficción', 'Fantasía'],\n","    'theme': ['Aventura', 'Distopía', 'Realismo mágico', 'Futurismo', 'Magia'],\n","    'rating': [5, 4, 5, 4, 5],  # Valoraciones previas\n","    'url': [\n","        'https://www.example.com/senor-de-los-anillos',  # Ejemplo de enlace a la página del libro\n","        'https://www.example.com/1984',\n","        'https://www.example.com/cien-anos-de-soledad',\n","        'https://www.example.com/fundacion',\n","        'https://www.example.com/harry-potter'\n","    ]\n","})\n"],"metadata":{"id":"OJNVbFomXmWL","executionInfo":{"status":"ok","timestamp":1742144058698,"user_tz":300,"elapsed":16,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}}},"execution_count":105,"outputs":[]},{"cell_type":"code","source":["# Funciones de filtrado (simuladas, reemplazar con la lógica real)\n","def correlacionar_mood_con_libros(mood, books):\n","    return books  # Retorna todos los libros (simulación)\n","\n","def correlacionar_edad_con_libros(age, books):\n","    return books  # Retorna todos los libros (simulación)\n","\n","# Función corregida para recomendar libros con URLs\n","def recomendar_libros_con_urls(user_preferences, books):\n","    mood = user_preferences.get('mood', '')  # Obtener estado de ánimo\n","    age = user_preferences.get('age', 0)  # Obtener edad\n","\n","    # Filtrar libros por mood y edad\n","    mood_books = correlacionar_mood_con_libros(mood, books)\n","    age_books = correlacionar_edad_con_libros(age, books)\n","\n","    # Hacer la intersección de ambos filtros\n","    recommendations = pd.merge(mood_books, age_books, how='inner', on=['book_id'])\n","\n","    # Seleccionar solo título y URL\n","    urls = recommendations[['title', 'url']]\n","\n","    return urls\n","\n","# Datos de usuario de ejemplo\n","user_preferences = {\n","    'mood': 'feliz',\n","    'age': 25\n","}\n","\n","# Obtener recomendaciones con URL\n","urls = recomendar_libros_con_urls(user_preferences, books)\n","print(urls)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":339},"id":"QbMq-FO38C3K","executionInfo":{"status":"error","timestamp":1742145078865,"user_tz":300,"elapsed":62,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"28864bfa-b8b8-46bf-cb10-733fed3bb95c"},"execution_count":127,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"None of [Index(['title', 'url'], dtype='object')] are in the [columns]\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-127-7d892a35b5ab>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;31m# Obtener recomendaciones con URL\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0murls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecomendar_libros_con_urls\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-127-7d892a35b5ab>\u001b[0m in \u001b[0;36mrecomendar_libros_con_urls\u001b[0;34m(user_preferences, books)\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0;31m# Seleccionar solo título y URL\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0murls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecommendations\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'url'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0murls\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6248\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6249\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['title', 'url'], dtype='object')] are in the [columns]\""]}]},{"cell_type":"code","source":["def recomendar_libros_con_urls(user_preferences, books):\n","    # Filtrar libros por género y tema\n","    mood_books = correlacionar_mood_con_libros(user_preferences['mood'], books)\n","    age_books = correlacionar_edad_con_libros(user_preferences['age'], books)\n","\n","    # Hacer la intersección de ambos filtros (mood y edad)\n","    recomendaciones = pd.merge(mood_books, age_books, how='inner', on=['book_id'])\n","\n","\n","    # Ahora incluimos el URL de cada libro en las recomendaciones\n","    recomendaciones_urls = recomendaciones[['title', 'url']]\n","\n","    return recomendaciones_urls\n","\n","# Obtener recomendaciones con URL\n","recomendaciones_con_urls = recomendar_libros_con_urls(user_preferences, books)\n","print(recomendaciones_con_urls)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":703},"id":"FbI1CvIYXq1W","executionInfo":{"status":"error","timestamp":1742145166111,"user_tz":300,"elapsed":60,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"c526c083-66e7-4e0f-e34d-b9019e52faec"},"execution_count":128,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"None of [Index(['title', 'url'], dtype='object')] are in the [columns]\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-128-549eafe80e52>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Obtener recomendaciones con URL\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mrecomendaciones_con_urls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecomendar_libros_con_urls\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecomendaciones_con_urls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-128-549eafe80e52>\u001b[0m in \u001b[0;36mrecomendar_libros_con_urls\u001b[0;34m(user_preferences, books)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;31m# Ahora incluimos el URL de cada libro en las recomendaciones\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mrecomendaciones_urls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecomendaciones\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'url'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mrecomendaciones_urls\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6248\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6249\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['title', 'url'], dtype='object')] are in the [columns]\""]}]},{"cell_type":"code","source":["def correlacionar_sexo_con_libros(sex, books):\n","    sexo_books = []\n","\n","    # Relacionar el sexo con temas de los libros\n","    if sex == 'femenino':\n","        sexo_books = books[books['genre'].isin(['Romántico', 'Ficción contemporánea', 'Aventura'])]\n","    elif sex == 'masculino':\n","        sexo_books = books[books['genre'].isin(['Acción', 'Ciencia ficción', 'Fantasía'])]\n","\n","    return sexo_books\n","\n","def correlacionar_nacionalidad_con_libros(nationality, books):\n","    nacionalidad_books = []\n","\n","    # Relacionar la nacionalidad con autores de la misma nacionalidad\n","    if nationality == 'Colombiano':\n","        nacionalidad_books = books[books['author'].isin(['Gabriel García Márquez', 'Fernando Vallejo', 'Laura Restrepo'])]\n","\n","    return nacionalidad_books\n","\n","# Función para recomendar libros con todos los factores\n","def recomendar_libros_personalizados_v2(user_preferences, books):\n","    # Filtrar libros según estado de ánimo\n","    mood_books = correlacionar_mood_con_libros(user_preferences['mood'], books)\n","\n","    # Filtrar libros según edad\n","    age_books = correlacionar_edad_con_libros(user_preferences['age'], books)\n","\n","    # Filtrar libros según sexo\n","    sex_books = correlacionar_sexo_con_libros(user_preferences['sex'], books)\n","\n","    # Filtrar libros según nacionalidad\n","    nationality_books = correlacionar_nacionalidad_con_libros(user_preferences['nationality'], books)\n","\n","    # Hacer la intersección de todos los filtros (estado de ánimo, edad, sexo, nacionalidad)\n","    recomendaciones = pd.merge(mood_books, age_books, how='inner', on=['book_id'])\n","    recomendaciones = pd.merge(recomendaciones, sex_books, how='inner', on=['book_id'])\n","    recomendaciones = pd.merge(recomendaciones, nationality_books, how='inner', on=['book_id'])\n","\n","    # Incluir la URL de cada libro\n","    recomendaciones_urls = recomendaciones[['title', 'url']]\n","\n","    return recomendaciones_urls\n","\n","# Obtener recomendaciones con todos los factores\n","recomendaciones_con_urls_v2 = recomendar_libros_personalizados_v2(user_preferences, books)\n","print(recomendaciones_con_urls_v2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":339},"id":"WQ8kjDQbXsd4","executionInfo":{"status":"error","timestamp":1742144177688,"user_tz":300,"elapsed":91,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"a2b68cd2-f160-4511-9b8d-7c09979f79c5"},"execution_count":110,"outputs":[{"output_type":"error","ename":"MergeError","evalue":"Passing 'suffixes' which cause duplicate columns {'title_x', 'rating_x', 'author_x', 'url_x', 'theme_x', 'genre_x'} is not allowed.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mMergeError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-110-1b716bc5c0a8>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;31m# Obtener recomendaciones con todos los factores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m \u001b[0mrecomendaciones_con_urls_v2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecomendar_libros_personalizados_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecomendaciones_con_urls_v2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-110-1b716bc5c0a8>\u001b[0m in \u001b[0;36mrecomendar_libros_personalizados_v2\u001b[0;34m(user_preferences, books)\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0mrecomendaciones\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmood_books\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mage_books\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'inner'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'book_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0mrecomendaciones\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecomendaciones\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msex_books\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'inner'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'book_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m     \u001b[0mrecomendaciones\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecomendaciones\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnationality_books\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'inner'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'book_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;31m# Incluir la URL de cada libro\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mvalidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m         )\n\u001b[0;32m--> 184\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mget_result\u001b[0;34m(self, copy)\u001b[0m\n\u001b[1;32m    886\u001b[0m         \u001b[0mjoin_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft_indexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_join_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    887\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 888\u001b[0;31m         result = self._reindex_and_concat(\n\u001b[0m\u001b[1;32m    889\u001b[0m             \u001b[0mjoin_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft_indexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_indexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_reindex_and_concat\u001b[0;34m(self, join_index, left_indexer, right_indexer, copy)\u001b[0m\n\u001b[1;32m    838\u001b[0m         \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    839\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 840\u001b[0;31m         llabels, rlabels = _items_overlap_with_suffix(\n\u001b[0m\u001b[1;32m    841\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msuffixes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    842\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_items_overlap_with_suffix\u001b[0;34m(left, right, suffixes)\u001b[0m\n\u001b[1;32m   2755\u001b[0m         \u001b[0mdups\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrlabels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mduplicated\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mduplicated\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2756\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mdups\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2757\u001b[0;31m         raise MergeError(\n\u001b[0m\u001b[1;32m   2758\u001b[0m             \u001b[0;34mf\"Passing 'suffixes' which cause duplicate columns {set(dups)} is \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2759\u001b[0m             \u001b[0;34mf\"not allowed.\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mMergeError\u001b[0m: Passing 'suffixes' which cause duplicate columns {'title_x', 'rating_x', 'author_x', 'url_x', 'theme_x', 'genre_x'} is not allowed."]}]},{"cell_type":"code","source":["# Crear un dataframe de libros con ejemplo de columnas, incluyendo la cantidad de páginas\n","books = pd.DataFrame({\n","    'book_id': [1, 2, 3, 4, 5],\n","    'title': ['El señor de los anillos', '1984', 'Cien años de soledad', 'Fundación', 'Harry Potter'],\n","    'author': ['J.R.R. Tolkien', 'George Orwell', 'Gabriel García Márquez', 'Isaac Asimov', 'J.K. Rowling'],\n","    'genre': ['Fantasía', 'Ciencia ficción', 'Realismo mágico', 'Ciencia ficción', 'Fantasía'],\n","    'theme': ['Aventura', 'Distopía', 'Realismo mágico', 'Futurismo', 'Magia'],\n","    'rating': [5, 4, 5, 4, 5],  # Valoraciones previas\n","    'pages': [1200, 328, 450, 500, 600],  # Cantidad de páginas por libro\n","    'url': [\n","        'https://www.example.com/senor-de-los-anillos',\n","        'https://www.example.com/1984',\n","        'https://www.example.com/cien-anos-de-soledad',\n","        'https://www.example.com/fundacion',\n","        'https://www.example.com/harry-potter'\n","    ]\n","})\n"],"metadata":{"id":"kOAsAd6lX6hB","executionInfo":{"status":"ok","timestamp":1742144184421,"user_tz":300,"elapsed":5,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}}},"execution_count":111,"outputs":[]},{"cell_type":"code","source":["# Supongamos que el usuario establece un objetivo de páginas de lectura\n","user_reading_goal = {\n","    'min_pages': 1000,  # Páginas mínimas que el usuario quiere leer\n","    'max_pages': 2000  # Páginas máximas que el usuario quiere leer\n","}\n","\n","def recomendar_libros_por_objetivo(user_reading_goal, books):\n","    # Filtrar libros recomendados\n","    recomendados = []\n","\n","    total_pages = 0\n","    for index, book in books.iterrows():\n","        if total_pages + book['pages'] <= user_reading_goal['max_pages']:\n","            recomendados.append(book)\n","            total_pages += book['pages']\n","        if total_pages >= user_reading_goal['min_pages']:\n","            break\n","\n","    return pd.DataFrame(recomendados)\n","\n","# Obtener recomendaciones basadas en el objetivo de páginas\n","recomendaciones_con_objetivo = recomendar_libros_por_objetivo(user_reading_goal, books)\n","print(recomendaciones_con_objetivo[['title', 'pages', 'url']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T6C33dAtYC9z","executionInfo":{"status":"ok","timestamp":1742144187320,"user_tz":300,"elapsed":19,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"bf0e1d79-ee30-4949-ccd9-0489bfb21bd8"},"execution_count":112,"outputs":[{"output_type":"stream","name":"stdout","text":["                     title  pages  \\\n","0  El señor de los anillos   1200   \n","\n","                                            url  \n","0  https://www.example.com/senor-de-los-anillos  \n"]}]},{"cell_type":"code","source":["def recomendar_libros_por_objetivo_y_tema(user_preferences, user_reading_goal, books):\n","    # Filtrar libros por género y tema (como se hizo antes)\n","    mood_books = correlacionar_mood_con_libros(user_preferences['mood'], books)\n","    age_books = correlacionar_edad_con_libros(user_preferences['age'], books)\n","    sex_books = correlacionar_sexo_con_libros(user_preferences['sex'], books)\n","    nationality_books = correlacionar_nacionalidad_con_libros(user_preferences['nationality'], books)\n","\n","    # Hacer la intersección de todos los filtros\n","    recomendaciones = pd.merge(mood_books, age_books, how='inner', on=['book_id'])\n","    recomendaciones = pd.merge(recomendaciones, sex_books, how='inner', on=['book_id'])\n","    recomendaciones = pd.merge(recomendaciones, nationality_books, how='inner', on=['book_id'])\n","\n","    # Recomendar libros según el objetivo de páginas\n","    return recomendar_libros_por_objetivo(user_reading_goal, recomendaciones)\n","\n","# Obtener recomendaciones basadas en todos los filtros y el objetivo de páginas\n","recomendaciones_personalizadas_con_objetivo = recomendar_libros_por_objetivo_y_tema(user_preferences, user_reading_goal, books)\n","print(recomendaciones_personalizadas_con_objetivo[['title', 'pages', 'url']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":315},"id":"QTO0i-9kYKAe","executionInfo":{"status":"error","timestamp":1742069341681,"user_tz":300,"elapsed":26,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"00e62733-4bf1-47b4-b54c-a99d2c4d8954"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"'mood'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-bbc9f516dd69>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Obtener recomendaciones basadas en todos los filtros y el objetivo de páginas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mrecomendaciones_personalizadas_con_objetivo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecomendar_libros_por_objetivo_y_tema\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muser_reading_goal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecomendaciones_personalizadas_con_objetivo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'pages'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'url'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-10-bbc9f516dd69>\u001b[0m in \u001b[0;36mrecomendar_libros_por_objetivo_y_tema\u001b[0;34m(user_preferences, user_reading_goal, books)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecomendar_libros_por_objetivo_y_tema\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muser_reading_goal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;31m# Filtrar libros por género y tema (como se hizo antes)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mmood_books\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcorrelacionar_mood_con_libros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mood'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mage_books\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcorrelacionar_edad_con_libros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'age'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0msex_books\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcorrelacionar_sexo_con_libros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_preferences\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sex'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'mood'"]}]},{"cell_type":"code","source":["def ajustar_objetivo_lectura(user_reading_goal, books, metodo='dia'):\n","    \"\"\"\n","    Función para ajustar el objetivo de lectura dependiendo del método elegido.\n","\n","    :param user_reading_goal: Objetivo de lectura (mínimo y máximo de páginas).\n","    :param books: Dataset de libros recomendados.\n","    :param metodo: Método de ajuste: 'dia' o 'total'.\n","    :return: Recomendaciones basadas en el objetivo de lectura.\n","    \"\"\"\n","    if metodo == 'dia':\n","        # El usuario quiere leer un número fijo de páginas por día.\n","        # Ajustamos el total de páginas a leer en función del ritmo de lectura diario.\n","        paginas_por_dia = int(input(\"¿Cuántas páginas deseas leer por día? \"))\n","        dias_para_terminar = int(input(\"¿En cuántos días te gustaría terminar el libro? \"))\n","\n","        # Calculamos el total de páginas a leer según las opciones del usuario.\n","        total_paginas = paginas_por_dia * dias_para_terminar\n","        print(f\"Tu objetivo es leer un total de {total_paginas} páginas en {dias_para_terminar} días.\")\n","\n","        # Filtrar libros según el objetivo de páginas\n","        user_reading_goal['max_pages'] = total_paginas\n","        recomendados = recomendar_libros_por_objetivo(user_reading_goal, books)\n","\n","    elif metodo == 'total':\n","        # El usuario quiere leer un objetivo fijo de páginas.\n","        print(\"Establece el número total de páginas que deseas leer.\")\n","        total_paginas = int(input(\"¿Cuántas páginas quieres leer en total? \"))\n","\n","        # Ajustamos el objetivo con el total de páginas\n","        user_reading_goal['max_pages'] = total_paginas\n","        recomendados = recomendar_libros_por_objetivo(user_reading_goal, books)\n","\n","    return recomendados\n","\n","def recomendar_libros_por_objetivo(user_reading_goal, books):\n","    \"\"\" Función para recomendar libros según el objetivo de páginas del usuario. \"\"\"\n","    recomendados = []\n","\n","    total_pages = 0\n","    for index, book in books.iterrows():\n","        if total_pages + book['pages'] <= user_reading_goal['max_pages']:\n","            recomendados.append(book)\n","            total_pages += book['pages']\n","        if total_pages >= user_reading_goal['min_pages']:\n","            break\n","\n","    return pd.DataFrame(recomendados)\n","\n","# Datos de ejemplo (libros)\n","books = pd.DataFrame({\n","    'book_id': [1, 2, 3, 4, 5],\n","    'title': ['El señor de los anillos', '1984', 'Cien años de soledad', 'Fundación', 'Harry Potter'],\n","    'author': ['J.R.R. Tolkien', 'George Orwell', 'Gabriel García Márquez', 'Isaac Asimov', 'J.K. Rowling'],\n","    'genre': ['Fantasía', 'Ciencia ficción', 'Realismo mágico', 'Ciencia ficción', 'Fantasía'],\n","    'theme': ['Aventura', 'Distopía', 'Realismo mágico', 'Futurismo', 'Magia'],\n","    'rating': [5, 4, 5, 4, 5],\n","    'pages': [1200, 328, 450, 500, 600],\n","    'url': [\n","        'https://www.example.com/senor-de-los-anillos',\n","        'https://www.example.com/1984',\n","        'https://www.example.com/cien-anos-de-soledad',\n","        'https://www.example.com/fundacion',\n","        'https://www.example.com/harry-potter'\n","    ]\n","})\n","\n","# Datos del usuario (pueden estar predeterminados o ser ingresados)\n","user_reading_goal = {\n","    'min_pages': 1000,  # Páginas mínimas que el usuario quiere leer\n","    'max_pages': 2000  # Páginas máximas que el usuario quiere leer\n","}\n","\n","# Elegir el método de ajuste\n","metodo = input(\"¿Te gustaría ajustar tu objetivo de lectura según el total de páginas o por día? (total/dia): \").lower()\n","\n","# Obtener las recomendaciones según la opción seleccionada\n","recomendaciones = ajustar_objetivo_lectura(user_reading_goal, books, metodo)\n","\n","# Mostrar las recomendaciones\n","print(\"\\nLibros recomendados basados en tu objetivo de lectura:\")\n","print(recomendaciones[['title', 'pages', 'url']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"duh0HDxYYLRp","executionInfo":{"status":"error","timestamp":1742072160188,"user_tz":300,"elapsed":6682,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"06f1b943-aaaf-4991-dcfa-5428cd6f89bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["¿Te gustaría ajustar tu objetivo de lectura según el total de páginas o por día? (total/dia): total\n","Establece el número total de páginas que deseas leer.\n","¿Cuántas páginas quieres leer en total? 50\n","\n","Libros recomendados basados en tu objetivo de lectura:\n"]},{"output_type":"error","ename":"KeyError","evalue":"\"None of [Index(['title', 'pages', 'url'], dtype='object')] are in the [columns]\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-a6dee9d79c77>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;31m# Mostrar las recomendaciones\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nLibros recomendados basados en tu objetivo de lectura:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecomendaciones\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'pages'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'url'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6248\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6249\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['title', 'pages', 'url'], dtype='object')] are in the [columns]\""]}]},{"cell_type":"code","source":["def ajustar_objetivo_por_tiempo_establecido(user_reading_goal, books):\n","    # Preguntar cuántos días el usuario tiene para leer\n","    dias_para_terminar_libro = int(input(\"¿En cuántos días te gustaría terminar este libro? \"))\n","\n","    # Calcular cuántas páginas se deben leer por día para cumplir el objetivo\n","    total_paginas = int(input(\"¿Cuántas páginas en total te gustaría leer? \"))\n","    paginas_por_dia = total_paginas / dias_para_terminar_libro\n","\n","    print(f\"Para terminar el libro en {dias_para_terminar_libro} días, debes leer {paginas_por_dia:.2f} páginas por día.\")\n","\n","    # Ajustar el objetivo de páginas para la recomendación\n","    user_reading_goal['max_pages'] = total_paginas\n","    recomendados = recomendar_libros_por_objetivo(user_reading_goal, books)\n","\n","    return recomendados\n","\n","# Obtener recomendaciones basadas en el tiempo estimado para terminar el libro\n","recomendaciones_por_tiempo_establecido = ajustar_objetivo_por_tiempo_establecido(user_reading_goal, books)\n","print(\"\\nLibros recomendados según el tiempo estimado para terminar el libro:\")\n","print(recomendaciones_por_tiempo_establecido[['title', 'pages', 'url']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"o_YXn7DlYtFr","executionInfo":{"status":"error","timestamp":1742072089385,"user_tz":300,"elapsed":9610,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"387b4ffc-b7df-4b59-ac1b-bcd96d5a0c30"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["¿En cuántos días te gustaría terminar este libro? 20\n","¿Cuántas páginas en total te gustaría leer? 30\n","Para terminar el libro en 20 días, debes leer 1.50 páginas por día.\n","\n","Libros recomendados según el tiempo estimado para terminar el libro:\n"]},{"output_type":"error","ename":"KeyError","evalue":"\"None of [Index(['title', 'pages', 'url'], dtype='object')] are in the [columns]\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-de36518d11da>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mrecomendaciones_por_tiempo_establecido\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0majustar_objetivo_por_tiempo_establecido\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muser_reading_goal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nLibros recomendados según el tiempo estimado para terminar el libro:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecomendaciones_por_tiempo_establecido\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'pages'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'url'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6248\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6249\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['title', 'pages', 'url'], dtype='object')] are in the [columns]\""]}]},{"cell_type":"code","source":["def enviar_recordatorio_lectura(dia_actual, paginas_por_dia, libros_recomendados):\n","    print(f\"\\nRecordatorio del día {dia_actual}:\")\n","    print(f\"Hoy debes leer {paginas_por_dia} páginas para alcanzar tu objetivo de lectura mensual.\")\n","    print(\"Aquí tienes los libros recomendados:\")\n","    for index, book in libros_recomendados.iterrows():\n","        print(f\"- {book['title']} ({book['pages']} páginas)\")\n","\n","# Supongamos que el usuario comienza el día 1 del mes\n","enviar_recordatorio_lectura(1, 50, recomendaciones_por_tiempo_establecido)\n"],"metadata":{"id":"Cw0uZsChY7_i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Añadir la columna de dificultad a los libros\n","books['difficulty'] = ['fácil', 'media', 'difícil', 'media', 'fácil']\n","\n","def recomendar_por_dificultad(user_preference, books):\n","    # Filtrar libros según la dificultad seleccionada por el usuario\n","    libros_filtrados = books[books['difficulty'] == user_preference]\n","    return libros_filtrados\n","\n","# Preguntar al usuario la dificultad de lectura que prefiere\n","dificultad_preferida = input(\"¿Qué nivel de dificultad prefieres? (fácil/media/difícil): \").lower()\n","\n","# Obtener libros recomendados basados en la dificultad\n","recomendaciones_por_dificultad = recomendar_por_dificultad(dificultad_preferida, books)\n","print(\"\\nLibros recomendados según la dificultad:\")\n","print(recomendaciones_por_dificultad[['title', 'pages', 'url']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZlDzFfCcZAjg","executionInfo":{"status":"ok","timestamp":1742076320474,"user_tz":300,"elapsed":4014378,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"8a0c14e7-0fb3-4654-e4af-049303d78282"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["¿Qué nivel de dificultad prefieres? (fácil/media/difícil): fácil\n","\n","Libros recomendados según la dificultad:\n","                     title  pages  \\\n","0  El señor de los anillos   1200   \n","4             Harry Potter    600   \n","\n","                                            url  \n","0  https://www.example.com/senor-de-los-anillos  \n","4          https://www.example.com/harry-potter  \n"]}]},{"cell_type":"code","source":["def clasificar_nivel_lector(frecuencia, paginas_por_dia, horas_por_dia, dificultad_promedio):\n","    \"\"\"\n","    Función para clasificar el nivel de lectura del usuario basado en su frecuencia,\n","    cantidad de páginas leídas, tiempo dedicado a la lectura, y dificultad de los libros.\n","\n","    :param frecuencia: Número de días a la semana que el usuario lee.\n","    :param paginas_por_dia: Promedio de páginas leídas por día.\n","    :param horas_por_dia: Número de horas dedicadas a la lectura diaria.\n","    :param dificultad_promedio: Promedio de dificultad de los libros (fácil, media, difícil).\n","    :return: Nivel del lector (Amateur, Intermedio, Avanzado).\n","    \"\"\"\n","\n","    # Categorización de dificultad promedio (podrías definir una escala más detallada)\n","    dificultad = {'fácil': 1, 'media': 2, 'difícil': 3}\n","\n","    # Evaluación del nivel según la frecuencia y las otras métricas\n","    if frecuencia < 3 and paginas_por_dia < 10:\n","        nivel = \"Amateur\"\n","    elif frecuencia >= 3 and paginas_por_dia < 20:\n","        nivel = \"Intermedio\"\n","    elif frecuencia >= 3 and paginas_por_dia >= 20 and dificultad_promedio <= 2:\n","        nivel = \"Intermedio\"\n","    else:\n","        nivel = \"Avanzado\"\n","\n","    return nivel\n","\n","# Datos de ejemplo\n","frecuencia_lectura = int(input(\"¿Cuántos días a la semana lees? (1-7): \"))\n","paginas_por_dia = int(input(\"¿Cuántas páginas lees por día en promedio?: \"))\n","horas_por_dia = float(input(\"¿Cuántas horas al día dedicas a la lectura?: \"))\n","dificultad_promedio = input(\"¿Qué tan difíciles son los libros que lees en promedio? (fácil/media/difícil): \").lower()\n","\n","# Clasificación del usuario\n","nivel = clasificar_nivel_lector(frecuencia_lectura, paginas_por_dia, horas_por_dia, dificultad_promedio)\n","print(f\"\\nTu nivel de lectura es: {nivel}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":384},"id":"iWF6oIRrZEJ6","executionInfo":{"status":"error","timestamp":1742076695924,"user_tz":300,"elapsed":29853,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"11d54768-cc17-484e-e1f7-37394e0242fc"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["¿Cuántos días a la semana lees? (1-7): 7\n","¿Cuántas páginas lees por día en promedio?: 20\n","¿Cuántas horas al día dedicas a la lectura?: 1\n","¿Qué tan difíciles son los libros que lees en promedio? (fácil/media/difícil): difícil\n"]},{"output_type":"error","ename":"TypeError","evalue":"'<=' not supported between instances of 'str' and 'int'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-9fb485346aa7>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;31m# Clasificación del usuario\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m \u001b[0mnivel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclasificar_nivel_lector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfrecuencia_lectura\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpaginas_por_dia\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhoras_por_dia\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdificultad_promedio\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\nTu nivel de lectura es: {nivel}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-24-9fb485346aa7>\u001b[0m in \u001b[0;36mclasificar_nivel_lector\u001b[0;34m(frecuencia, paginas_por_dia, horas_por_dia, dificultad_promedio)\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mfrecuencia\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m3\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mpaginas_por_dia\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mnivel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Intermedio\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0;32melif\u001b[0m \u001b[0mfrecuencia\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m3\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mpaginas_por_dia\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m20\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdificultad_promedio\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m         \u001b[0mnivel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Intermedio\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '<=' not supported between instances of 'str' and 'int'"]}]},{"cell_type":"code","source":["def recomendar_libros_por_nivel(nivel_lector, books):\n","    \"\"\"\n","    Recomendación de libros basada en el nivel de lectura del usuario.\n","\n","    :param nivel_lector: Nivel de lectura (Amateur, Intermedio, Avanzado).\n","    :param books: DataFrame con los libros recomendados.\n","    :return: Libros recomendados para el nivel de lectura.\n","    \"\"\"\n","    if nivel_lector == 'Amateur':\n","        # Filtrar libros con menos de 200 páginas y dificultad fácil o media\n","        libros_recomendados = books[books['pages'] < 200]\n","        libros_recomendados = libros_recomendados[libros_recomendados['difficulty'].isin(['fácil', 'media'])]\n","    elif nivel_lector == 'Intermedio':\n","        # Filtrar libros con entre 200 y 400 páginas y dificultad media\n","        libros_recomendados = books[(books['pages'] >= 200) & (books['pages'] <= 400)]\n","        libros_recomendados = libros_recomendados[libros_recomendados['difficulty'] == 'media']\n","    else:\n","        # Sugerir libros con más de 400 páginas y dificultad difícil\n","        libros_recomendados = books[(books['pages'] > 400) & (books['difficulty'] == 'difícil')]\n","\n","    return libros_recomendados\n","\n","# Obtener las recomendaciones basadas en el nivel de lector\n","recomendaciones = recomendar_libros_por_nivel(nivel, books)\n","print(\"\\nLibros recomendados según tu nivel de lectura:\")\n","print(recomendaciones[['title', 'pages', 'difficulty', 'url']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TLIoP9qAZHcH","executionInfo":{"status":"ok","timestamp":1742072287562,"user_tz":300,"elapsed":12,"user":{"displayName":"María Paz Estrada Granada","userId":"03540436891056803694"}},"outputId":"541b7c36-b101-4c84-a0a2-39ac91d0214a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Libros recomendados según tu nivel de lectura:\n","                  title  pages difficulty  \\\n","2  Cien años de soledad    450    difícil   \n","\n","                                            url  \n","2  https://www.example.com/cien-anos-de-soledad  \n"]}]}]}